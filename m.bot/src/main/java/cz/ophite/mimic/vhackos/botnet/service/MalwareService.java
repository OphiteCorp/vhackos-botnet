package cz.ophite.mimic.vhackos.botnet.service;

import cz.ophite.mimic.vhackos.botnet.Botnet;
import cz.ophite.mimic.vhackos.botnet.api.module.MalwareModule;
import cz.ophite.mimic.vhackos.botnet.service.base.EndpointService;
import cz.ophite.mimic.vhackos.botnet.service.base.IService;
import cz.ophite.mimic.vhackos.botnet.service.base.Service;
import cz.ophite.mimic.vhackos.botnet.shared.injection.Autowired;
import cz.ophite.mimic.vhackos.botnet.shared.injection.Inject;
import cz.ophite.mimic.vhackos.botnet.shared.utils.SharedUtils;

/**
 * Služba, která kontroluje a ovládá výrobu malware.
 *
 * @author mimic
 */
@Inject
@EndpointService(IService.SERVICE_MALWARE)
public final class MalwareService extends Service {

    @Autowired
    private MalwareModule malwareModule;

    protected MalwareService(Botnet botnet) {
        super(botnet);
    }

    @Override
    public String getDescription() {
        return "Controls and manages the production of malware";
    }

    @Override
    protected void initialize() {
        setTimeout(getConfig().getMalwareTimeout());
    }

    @Override
    protected void execute() {
        if (!SharedUtils.toBoolean(getShared().getUpdateResponse().getMalwareKit())) {
            getLog().info("Malware Kit is not available. Next check will be in: {}", SharedUtils
                    .toTimeFormat(getTimeout()));
            return;
        }
        var resp = malwareModule.getMalwareKit();
        var running = SharedUtils.toBoolean(resp.getBanklogRunning());

        if (running) {
            getLog().info("Will finish in: {}. Next check will be in: {}", SharedUtils
                    .toTimeFormat(resp.getBanklogLeft() * 1000), SharedUtils.toTimeFormat(getTimeout()));
        } else {
            sleep();
            resp = malwareModule.createMalwareKit();
            getLog().info("Production started. Current number: {}. Next check will be in: {}", resp
                    .getMalwares(), SharedUtils.toTimeFormat(getTimeout()));
        }
    }
}
